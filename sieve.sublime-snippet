<snippet>
	<content><![CDATA[
/*
Usage : 
	Primes pr(1000); // @arg : The highest range upto which you may generate primes (Always keep it higher than required)
	pr.genPrimesBetween(a,b, lldarray ) //@arg : a : lower range  ,, b : higher range ,, lldarray :: the array in which you want to store the final result 
*/

class Primer{
private:
	lld primesList[80000] ; //Max upto 10^6
	bool primesBitset[1000001]; // A bitset of primes initially all are primes 
	lld primesCanBeGeneratedUpto;
	lld primesCount;
	void sieve(lld n){  
	 	lld i, j;
		primesBitset[1] = 1; // 1 is not a prime
		for(i=2; i<=n; i++){
			if(primesBitset[i] == 0){
				for(j=i; (i*j)<=n; j++)
					primesBitset[(i*j)] = 1;
				primesList[primesCount++] = i;
			}
		}
	}
public:
	void genPrimesBetween(lld lower , lld higher,lld *resultPrimes){
		/*
			You may add additional code to optimize in case higher is less than 10^6.
		*/

		if(lower == 1) lower++;
		lld diff = higher - lower + 1;
		bool Bitset[1000001] = {0};

		lld sqrthigher = ceil(sqrt(higher));

		for(lld i=0;primesList[i] < sqrthigher ;i++){
			lld k = ceil((double)lower/primesList[i]);
			lld maxi = higher/primesList[i];
			if( k == 1 ) k++;
			while(k <= maxi){
				Bitset[k*primesList[i] - lower] = 1;
				k++;
			}
		}
		lld count = 0;
		for(lld i=0;i<higher-lower+1;i++){
			if(Bitset[i]==0)
				resultPrimes[count++] = i + lower;
		}
		resultPrimes[count++] = -1;
 
	}
	Primer(lld n = 10){
		primesCount = 0;
		n = min(n+1000,(lld)1e12+100);   
		primesCanBeGeneratedUpto = n;
		sieve(ceil(sqrt(n)));  //Include "cmath"

	}
	void printprimes(){
		lld i  = 0;
		for(i=0;i<primesCount;i++){
			cout << primesList[i] << " ";
		}
	}
	
};



]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sieve</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
