<snippet>
	<content><![CDATA[
lld power(lld a , lld b,lld MOD){
	/*  Define MOD as a PreProcessor or remove from this function if it aint required  */
	long long ans = 1;
	while(b){ 
		if( b&1 ) 
			ans = (ans * a);
		if(ans > MOD)  ans %= MOD;
		a = (a * a);
		if(a > MOD)  a %= MOD;
		b >>= 1;				
	}
	return ans;
}

lld modInverse(lld a , lld m){
	/*  
	 #1 This modMultiplicative method uses Little Fermats theorem for finding Multiplicative Inverse 
		which requires m to be prime ( not just coprime to a ). If m is not prime but co-prime use 
		Eulers Extended algorithm.
	 #2 define MOD equal to m
	*/
	return power(a,m-2);
}



lld factmod(lld k , lld mod){   //finds a!%mod
	if(k>=mod) return 0;
	lld q = 1;
	for(lld i = k+1 ; i<=mod-1 ; i++) q = (i * q)%mod; 
	lld ans = modInverse(q,mod);
	ans = -1 * ans + mod;
	ans %= mod; 

	return ans;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>factmod</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
